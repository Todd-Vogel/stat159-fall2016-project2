reverse_words("sentence! this reverse")
reverse_words <- function(words) {
split_sent <- split_chars(words)
i <- length(split_sent)
curr_word <- c('')
new_sent <- c('')
while(i != 0) {
if (split_sent[i] == " ") {
temp <- paste(new_sent, curr_word, sep = " ")
new_sent <- c(str_replace_all(temp, fixed(" "), ""))
curr_word <- c("")
i <- i - 1
} else {
curr_word <- paste(split_sent[i], curr_word, sep = '')
i <- i - 1
}
}
new_sent <- c(paste(new_sent, curr_word, sep = " "))
return(new_sent)
}
reverse_words("sentence! this reverse")
library(stringr)
reverse_words <- function(words) {
split_sent <- split_chars(words)
i <- length(split_sent)
curr_word <- c('')
new_sent <- c('')
while(i != 0) {
if (split_sent[i] == " ") {
temp <- paste(new_sent, curr_word, sep = " ")
new_sent <- c(str_replace_all(temp, fixed(" "), ""))
curr_word <- c("")
i <- i - 1
} else {
curr_word <- paste(split_sent[i], curr_word, sep = '')
i <- i - 1
}
}
new_sent <- c(paste(new_sent, curr_word, sep = " "))
return(new_sent)
}
reverse_words("sentence! this reverse")
library(stringr)
reverse_words <- function(words) {
split_sent <- split_chars(words)
i <- length(split_sent)
curr_word <- c('')
new_sent <- c('')
while(i != 0) {
if (split_sent[i] == " ") {
str_replace_all(curr_word, fixed(" "), "")
new_sent <- paste(new_sent, curr_word, sep = " ")
curr_word <- c("")
i <- i - 1
} else {
curr_word <- paste(split_sent[i], curr_word, sep = '')
i <- i - 1
}
}
new_sent <- c(paste(new_sent, curr_word, sep = " "))
return(new_sent)
}
reverse_words("sentence! this reverse")
?str_split
reverse_words <- function(words) {
print(str_split(words, " "))
}
reverse_words("sentence! this reverse")
reverse_words <- function(words) {
splitted <- str_split(words, " ")
split_now <- splitted
for (i in 1:length(splitted)) {
split_now[i] <- splitted[length(splitted) - i + 1]
}
return(split_now)
}
reverse_words("sentence! this reverse")
reverse_words <- function(words) {
splitted <- str_split(words, " ")
split_now <- splitted
for (i in 1:length(splitted)) {
split_now[i] <- splitted[length(splitted) - i + 1]
}
return(split_now)
}
reverse_words("sentence! this reverse")
reverse_words <- function(words) {
splitted <- str_split(words, " ")
print(length(splitted))
split_now <- splitted
for (i in 1:length(splitted)) {
split_now[i] <- splitted[length(splitted) - i + 1]
}
return(split_now)
}
reverse_words("sentence! this reverse")
reverse_words <- function(words) {
splitted <- str_split(words, " ")
print(length(splitted[[1]]))
split_now <- splitted
for (i in 1:length(splitted)) {
split_now[i] <- splitted[length(splitted) - i + 1]
}
return(split_now)
}
reverse_words("sentence! this reverse")
reverse_words <- function(words) {
splitted <- str_split(words, " ")[[1]]
split_now <- splitted
for (i in 1:length(splitted)) {
split_now[i] <- splitted[length(splitted) - i + 1]
}
return(split_now)
}
reverse_words("sentence! this reverse")
reverse_words <- function(words) {
splitted <- str_split(words, " ")[[1]]
split_now <- splitted
for (i in 1:length(splitted)) {
split_now[i] <- splitted[length(splitted) - i + 1]
}
return(paste(split_now, sep = " ")
}
reverse_words <- function(words) {
splitted <- str_split(words, " ")[[1]]
split_now <- splitted
for (i in 1:length(splitted)) {
split_now[i] <- splitted[length(splitted) - i + 1]
}
return(paste(split_now, sep = " "))
}
reverse_words("sentence! this reverse")
?str_split
library(stringr)
?str_split
reverse_words <- function(words) {
splitted <- str_split(words, " ")[[1]]
split_now <- splitted
for (i in 1:length(splitted)) {
split_now[i] <- splitted[length(splitted) - i + 1]
}
return(paste(split_now, sep = " "))
}
reverse_words("sentence! this reverse")
reverse_words("sentence! this reverse")
cat(reverse_words("sentence! this reverse"))
library(stringr)
reverse_words <- function(words) {
splitted <- str_split(words, " ")[[1]]
split_now <- splitted
for (i in 1:length(splitted)) {
split_now[i] <- splitted[length(splitted) - i + 1]
}
print(split_now)
print(paste(split_now, sep = " "))
return(paste(split_now, sep = " "))
}
reverse_words("sentence! this reverse")
library(stringr)
reverse_words <- function(words) {
splitted <- str_split(words, " ")[[1]]
split_now <- splitted
for (i in 1:length(splitted)) {
split_now[i] <- splitted[length(splitted) - i + 1]
}
print(split_now)
print(paste(split_now, sep = " "))
return(paste(split_now, collapse = " "))
}
reverse_words("sentence! this reverse")
library(stringr)
reverse_words <- function(words) {
splitted <- str_split(words, " ")[[1]]
split_now <- splitted
for (i in 1:length(splitted)) {
split_now[i] <- splitted[length(splitted) - i + 1]
}
return(paste(split_now, collapse = " "))
}
reverse_words("sentence! this reverse")
reverse_words("string")
num_cons(fox)
for (i in 1:9) {
print(paste(paste('plot0', i, sep = ''), ".png", sep = ''))
}
for (i in 10:100) {
print(paste(paste('plot', i, sep = ''), ".png", sep = ''))
}
states <- rownames(USArrests)
head(states, n = 5)
grep(pattern = 'z', x = states)
starts_with <- function(word, letter) {
if (length(grep(pattern = paste("^", letter, sep = ''), x = word) > 0)) {
return(TRUE)
} else {
return(FALSE)
}
}
starts_with("Hello", 'H')  # TRUE
starts_with("Good morning", 'H')  # FALSE
ends_with <- function(word, letter) {
ends_with <- function(word, letter) {
ends_with <- function(word, letter) {
ends_with <- function(word, letter) {
if (length(grep(pattern = paste(letter, '$', sep = ''), x = word) > 0)) {
return(TRUE)
} else {
return(FALSE)
}
}
ends_with("Hello", 'o')  # TRUE
ends_with("Good morning", 'o')  # FALSE
ends_with <- function(word, letter) {
if (length(grep(pattern = paste(letter, '$', sep = ''), x = word) > 0)) {
return(TRUE)
} else {
return(FALSE)
}
}
ends_with("Hello", 'o')  # TRUE
ends_with("Good morning", 'o')  # FALSE
split_chars <- function(char_str) {
char_vect <- strsplit(char_str, NULL)
return(char_vect[[1]])
}
split_chars('Go Bears!')
split_chars('Expecto Patronum')
num_vowels <- function(char_vect) {
count <- rep(0, times = 5)
vowel_names <- c("a", "e", "i", "o", "u")
names(count) <- vowel_names
vowels <- c("a", "e", "i", "o", "u")
for (i in tolower(char_vect)) {
if (i %in% vowels) {
count[which(vowels == i)] <- count[which(vowels == i)] + 1
}
}
return(count)
}
vec <- c('G', 'o', ' ', 'B', 'e', 'a', 'r', 's', '!')
num_vowels(vec)
count_vowels <- function(char_str) {
count_split <- split_chars(char_str)
return(num_vowels(count_split))
}
count_vowels("The quick brown fox jumps over the lazy dog")
count_vowels("THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG")
num_cons <- function(input) {
count_split <- split_chars(input)
return(length(grep(pattern = "[^aeiou]",  x = count_split, ignore.case = TRUE))
- length(grep(pattern = "[[:blank:]]",  x = count_split, ignore.case = TRUE)))
}
fox <- "The quick brown fox jumps over the lazy dog"
num_cons(fox)
library(stringr)
reverse_words2 <- function(words) {
split_sent <- split_chars(words)
i <- length(split_sent)
curr_word <- c('')
new_sent <- c('')
while(i != 0) {
if (split_sent[i] == " ") {
str_replace_all(curr_word, fixed(" "), "")
new_sent <- paste(new_sent, curr_word, sep = " ")
curr_word <- c("")
i <- i - 1
} else {
curr_word <- paste(split_sent[i], curr_word, sep = '')
i <- i - 1
}
}
new_sent <- c(paste(new_sent, curr_word, sep = " "))
return(new_sent)
}
library(stringr)
reverse_words <- function(words) {
splitted <- str_split(words, " ")[[1]]
split_now <- splitted
for (i in 1:length(splitted)) {
split_now[i] <- splitted[length(splitted) - i + 1]
}
return(paste(split_now, collapse = " "))
}
reverse_words("sentence! this reverse")
reverse_words("string")
nav_node <- getNodeSet(
doc = doc,
path = '//ul[@class="nav navbar-nav secondary-nav"]')
library(XML)
# parsing html content
doc <- htmlParse('http://www.berkeley.edu/atoz')
install.packages(XML)
install.packages("XML")
library(XML)
# parsing html content
doc <- htmlParse('http://www.berkeley.edu/atoz')
nav_node <- getNodeSet(
doc = doc,
path = '//ul[@class="nav navbar-nav secondary-nav"]')
nav_node
navbar_nodes <- getNodeSet(
doc = doc,
path = '//ul[@class="nav navbar-nav secondary-nav"]/li')
navbar_nodes
xpathSApply(
doc = doc,
path = '//ul[@class="nav navbar-nav secondary-nav"]',
fun = xmlValue)
Alinks <- xpathSApply(
doc = doc,
path = '//div[@class="list-content"]/p/a',
fun = xmlAttrs)
ALinks
Alinks
install.packages(c("BH", "boot", "class", "cluster", "curl", "devtools", "digest", "evaluate", "foreign", "formatR", "ggplot2", "git2r", "gtable", "highr", "htmltools", "httr", "jsonlite", "knitr", "MASS", "Matrix", "memoise", "mgcv", "mime", "munsell", "nlme", "nnet", "plyr", "R6", "Rcpp", "readr", "rmarkdown", "rstudioapi", "rversions", "scales", "spatial", "stringi", "stringr", "survival", "XML", "xml2", "xtable"))
ls
dir
s
ls
cd
x -> []
x -> [1,2,3,4,5]
x -> {1,2,3,4,5}
x <- [1,2,3,4,5]
x <- c(1,2,3,4,5)
nstall.packages("rmarkdown")
install.packages("rmarkdown")
setwd("Documents/Fall 2016/Stats 159/projects/proj2/")
library("pls")
library("pls")
training_data <- read.csv("../../data/training_data.csv")
training_data <- training_data[,-1]
library("pls")
training_data <- read.csv("../../data/training_data.csv")
training_data <- training_data[,-1]
setwd("~/Documents/Fall 2016/Stats 159/projects/proj2/code/scripts")
library("pls")
training_data <- read.csv("../../data/training_data.csv")
training_data <- training_data[,-1]
response <- training_data$Balance
response <- as.matrix(response)
predictors <- training_data[,-12]
predictors <- as.matrix(predictors)
set.seed(1)
plsr_obj <- plsr(response ~ predictors, validation = "CV")
plsr_model <- plsr_obj$validation$PRESS
save(plsr_model, file = "../../data/plsr_model.RData")
png("../../images/CV_Errors_plsr.png")
validationplot(plsr_obj, val.type = "MSEP")
dev.off()
test_data <- read.csv("../../data/test_data.csv")
test_response <- test_data$balance
test_data <- test_data[, -1]
test_predictors <- test_data[,-12]
test_predictors <- as.matrix(test_predictors)
test_plsr <- predict(plsr_obj, newx = test_predictors, s = "validation$PRESS", type = "response")
save(test_plsr, file = "../../data/testing_plsr.RData")
source("../functions/mse_function.R")
plsr_mse <- MSE(test_plsr, test_response)
test_plsr
test_plsr <- predict(plsr_obj, ncomp = 1,  newdata =test_predictors, s = "validation$PRESS", type = "response")
save(test_plsr, file = "../../data/testing_plsr.RData")
source("../functions/mse_function.R")
plsr_mse <- MSE(test_plsr, test_response)
test_plsr
test_response
test_response <- test_data$balance
test_response
test_data <- read.csv("../../data/test_data.csv")
test_data
test_response <- test_data$balance
test_response
colnames(test_data)
test_response <- test_data$Balance
test_data <- test_data[, -1]
test_predictors <- test_data[,-12]
test_predictors <- as.matrix(test_predictors)
test_plsr <- predict(plsr_obj, ncomp = 1,  newdata =test_predictors, s = "validation$PRESS", type = "response")
save(test_plsr, file = "../../data/testing_plsr.RData")
source("../functions/mse_function.R")
plsr_mse <- MSE(test_plsr, test_response)
plsr_mse
require("pls")
training_data <- read.csv(file = "../../data/training_data.csv")
training_data <- training_data[,-1]
#formatting response and predictors
response <- training_data$Balance #Balance
response <- as.matrix(response)
predictors <- training_data[,-12]  #everythning but Balance
predictors <- as.matrix(predictors)
set.seed(100)
pcr_obj <- pcr(response ~ predictors, validation = "CV")
pcr_model <- pcr_obj$validation$PRESS
save(pcr_model, file = "../../data/pcr_model.RData")
#Adding Histograms to Images
png('../../images/CV_Errors_pcr.png')
validationplot(pcr_obj, val.type = "MSEP")
dev.off()
test_set <- read.csv(file = "../../data/test_data.csv")
response = test_set$Balance
test_set <- test_set[,-1]
test_set <- test_set[,-12]
test_predictors = as.matrix(test_set)
test_pcr <- predict(pcr_obj, ncomp = 1, newdata = test_predictors, s = "validation$PRESS", type="response")
save(test_pcr,file =  "../../data/testing_pcr.RData")
source("../functions/mse_function.R")
MSE_pcr = MSE(test_pcr, response)
save(MSE_pcr, file = "../../data/MSE_pcr.RData")
full_data <- read.csv(file = "../../data/scaled_credit.csv")
full_data <- full_data[,-1]
response <- full_data$Balance #Balance
response <- as.matrix(response)
predictors <- full_data[,-12]  #everythning but Balance
predictors <- as.matrix(predictors)
#rerunning model on the full data set
full_pcr = pcr(response ~ predictors, validation = "CV")
#getting coefficients and saving
pcr_coef <- coef(full_pcr)
save(pcr_coef, file = "../../data/full_coeffecients_pcr.RData")
#saving  the important stuff
sink(file = "../../data/pcr_model.txt")
print("The PCR model")
pcr_model
print("The PCR MSE")
MSE_pcr
print("The coefficients on the full dataset")
pcr_coef
sink()
coef(pcr_obj)
ocr_model
pcr_model
coef(pcr_model)
coef(pcr_model)
coef(pcr_obj)
validationplot(pcr_obj, val.type = "MSEP")
validationplot(pcr_coef, val.type = "MSEP")
validationplot(pcr_obj, val.type = "MSEP")
save(pcr_model, pcr_coef, file = "../../data/pcr_model.RData")
plsr_model <- plsr_obj$validation$PRESS
plsr_coef <- coef(plsr_model)
save(plsr_model,plsr_coef, file = "../../data/plsr_model.RData")
library("pls")
training_data <- read.csv("../../data/training_data.csv")
training_data <- training_data[,-1]
response <- training_data$Balance
response <- as.matrix(response)
predictors <- training_data[,-12]
predictors <- as.matrix(predictors)
set.seed(1)
plsr_obj <- plsr(response ~ predictors, validation = "CV")
plsr_model <- plsr_obj$validation$PRESS
plsr_coef <- coef(plsr_model)
plsr_coef <- coef(plsr_obj)
save(plsr_model,plsr_coef, file = "../../data/plsr_model.RData")
plsr__full_coef <- coef(full_plsr)
full_response <- full_data$Balance
full_response <- as.matrix(full_response)
full_response <- full_data$Balance
full_response <- as.matrix(full_response)
full_predictors <- full_data[,-12]
full_predictors <- as.matrix(full_predictors)
full_plsr <- plsr(full_response ~ full_predictors, validation = "CV")
plsr__full_coef <- coef(full_plsr)
require("pls")
training_data <- read.csv(file = "../../data/training_data.csv")
training_data <- training_data[,-1]
#formatting response and predictors
response <- training_data$Balance #Balance
response <- as.matrix(response)
predictors <- training_data[,-12]  #everythning but Balance
predictors <- as.matrix(predictors)
set.seed(100)
pcr_obj <- pcr(response ~ predictors, validation = "CV")
pcr_model <- pcr_obj$validation$PRESS
pcr_coef <- coef(pcr_obj)
save(pcr_model, pcr_coef, file = "../../data/pcr_model.RData")
#Adding Histograms to Images
png('../../images/CV_Errors_pcr.png')
validationplot(pcr_obj, val.type = "MSEP")
dev.off()
test_set <- read.csv(file = "../../data/test_data.csv")
response = test_set$Balance
test_set <- test_set[,-1]
test_set <- test_set[,-12]
test_predictors = as.matrix(test_set)
test_pcr <- predict(pcr_obj, ncomp = 1, newdata = test_predictors, s = "validation$PRESS", type="response")
save(test_pcr,file =  "../../data/testing_pcr.RData")
source("../functions/mse_function.R")
MSE_pcr = MSE(test_pcr, response)
save(MSE_pcr, file = "../../data/MSE_pcr.RData")
full_data <- read.csv(file = "../../data/scaled_credit.csv")
full_data <- full_data[,-1]
response <- full_data$Balance #Balance
response <- as.matrix(response)
predictors <- full_data[,-12]  #everythning but Balance
predictors <- as.matrix(predictors)
#rerunning model on the full data set
full_pcr = pcr(response ~ predictors, validation = "CV")
#getting coefficients and saving
pcr_full_coef <- coef(full_pcr)
save(pcr_coef, file = "../../data/full_coeffecients_pcr.RData")
#saving  the important stuff
sink(file = "../../data/pcr_model.txt")
print("The PCR model")
pcr_coef
print("The PCR MSE")
MSE_pcr
print("applied predictors")
test_pcr
print("The coefficients on the full dataset")
pcr_full_coef
sink()
