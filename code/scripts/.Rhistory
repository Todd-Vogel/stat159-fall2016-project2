head(states, n = 5)
grep(pattern = 'z', x = states)
starts_with <- function(word, letter) {
if (length(grep(pattern = paste("^", letter, sep = ''), x = word) > 0)) {
return(TRUE)
} else {
return(FALSE)
}
}
starts_with("Hello", 'H')  # TRUE
starts_with("Good morning", 'H')  # FALSE
ends_with <- function(word, letter) {
ends_with <- function(word, letter) {
ends_with <- function(word, letter) {
ends_with <- function(word, letter) {
if (length(grep(pattern = paste(letter, '$', sep = ''), x = word) > 0)) {
return(TRUE)
} else {
return(FALSE)
}
}
ends_with("Hello", 'o')  # TRUE
ends_with("Good morning", 'o')  # FALSE
ends_with <- function(word, letter) {
if (length(grep(pattern = paste(letter, '$', sep = ''), x = word) > 0)) {
return(TRUE)
} else {
return(FALSE)
}
}
ends_with("Hello", 'o')  # TRUE
ends_with("Good morning", 'o')  # FALSE
split_chars <- function(char_str) {
char_vect <- strsplit(char_str, NULL)
return(char_vect[[1]])
}
split_chars('Go Bears!')
split_chars('Expecto Patronum')
num_vowels <- function(char_vect) {
count <- rep(0, times = 5)
vowel_names <- c("a", "e", "i", "o", "u")
names(count) <- vowel_names
vowels <- c("a", "e", "i", "o", "u")
for (i in tolower(char_vect)) {
if (i %in% vowels) {
count[which(vowels == i)] <- count[which(vowels == i)] + 1
}
}
return(count)
}
vec <- c('G', 'o', ' ', 'B', 'e', 'a', 'r', 's', '!')
num_vowels(vec)
count_vowels <- function(char_str) {
count_split <- split_chars(char_str)
return(num_vowels(count_split))
}
count_vowels("The quick brown fox jumps over the lazy dog")
count_vowels("THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG")
num_cons <- function(input) {
count_split <- split_chars(input)
return(length(grep(pattern = "[^aeiou]",  x = count_split, ignore.case = TRUE))
- length(grep(pattern = "[[:blank:]]",  x = count_split, ignore.case = TRUE)))
}
fox <- "The quick brown fox jumps over the lazy dog"
num_cons(fox)
library(stringr)
reverse_words2 <- function(words) {
split_sent <- split_chars(words)
i <- length(split_sent)
curr_word <- c('')
new_sent <- c('')
while(i != 0) {
if (split_sent[i] == " ") {
str_replace_all(curr_word, fixed(" "), "")
new_sent <- paste(new_sent, curr_word, sep = " ")
curr_word <- c("")
i <- i - 1
} else {
curr_word <- paste(split_sent[i], curr_word, sep = '')
i <- i - 1
}
}
new_sent <- c(paste(new_sent, curr_word, sep = " "))
return(new_sent)
}
library(stringr)
reverse_words <- function(words) {
splitted <- str_split(words, " ")[[1]]
split_now <- splitted
for (i in 1:length(splitted)) {
split_now[i] <- splitted[length(splitted) - i + 1]
}
return(paste(split_now, collapse = " "))
}
reverse_words("sentence! this reverse")
reverse_words("string")
nav_node <- getNodeSet(
doc = doc,
path = '//ul[@class="nav navbar-nav secondary-nav"]')
library(XML)
# parsing html content
doc <- htmlParse('http://www.berkeley.edu/atoz')
install.packages(XML)
install.packages("XML")
library(XML)
# parsing html content
doc <- htmlParse('http://www.berkeley.edu/atoz')
nav_node <- getNodeSet(
doc = doc,
path = '//ul[@class="nav navbar-nav secondary-nav"]')
nav_node
navbar_nodes <- getNodeSet(
doc = doc,
path = '//ul[@class="nav navbar-nav secondary-nav"]/li')
navbar_nodes
xpathSApply(
doc = doc,
path = '//ul[@class="nav navbar-nav secondary-nav"]',
fun = xmlValue)
Alinks <- xpathSApply(
doc = doc,
path = '//div[@class="list-content"]/p/a',
fun = xmlAttrs)
ALinks
Alinks
install.packages(c("BH", "boot", "class", "cluster", "curl", "devtools", "digest", "evaluate", "foreign", "formatR", "ggplot2", "git2r", "gtable", "highr", "htmltools", "httr", "jsonlite", "knitr", "MASS", "Matrix", "memoise", "mgcv", "mime", "munsell", "nlme", "nnet", "plyr", "R6", "Rcpp", "readr", "rmarkdown", "rstudioapi", "rversions", "scales", "spatial", "stringi", "stringr", "survival", "XML", "xml2", "xtable"))
ls
dir
s
ls
cd
x -> []
x -> [1,2,3,4,5]
x -> {1,2,3,4,5}
x <- [1,2,3,4,5]
x <- c(1,2,3,4,5)
nstall.packages("rmarkdown")
install.packages("rmarkdown")
setwd(dir = "Documents/Fall 2016/Stats 159/projects/proj2/code/scripts/")
library("glmnet")
library("lars")
library("MASS")
training_data <- read.csv(file = "../../data/training_data.csv")
training_data <- training_data[,-1]
#formatting response and predictors
response <- training_data$Balance #Balance
response <- as.matrix(response)
predictors <- training_data[,-12]  #everythning but Balance
predictors <- as.matrix(predictors)
grid <- 10^seq(10, -2, length = 100)
set.seed(100)
cross_v <- cv.glmnet(x = predictors, y = response, intercept = FALSE, standardize = FALSE, lambda = grid, alpha = 0)
best_model_ridge <- coef(cross_v, cross_v$lambda.min)[which(coef(cross_v, s = "lambda.min") != 0)]
#saving coefficients of the model
save(best_model_ridge, file = "../../data/ridge_model.RData")
#Adding Histograms to Images
png('../../images/CV_Errors_Ridge.png')
plot(cross_v, main = "CV Errors Ridge")
dev.off()
test_set <- read.csv(file = "../../data/test_data.csv")
response = test_set$Balance
test_set <- test_set[,-1]
test_set <- test_set[,-12]
test_predictors = as.matrix(test_set)
test_ridge <- predict(cross_v, newx = test_predictors, s = "lambda.min", type="response")
save(test_ridge,file =  "../../data/testing_ridge.RData")
source("../functions/mse_function.R")
MSE_ridge = MSE(test_ridge, response)
save(MSE_ridge, file = "../../data/MSE_ridge.RData" )
full_data <- read.csv(file = "../../data/scaled_credit.csv")
full_data <- full_data[,-1]
response <- full_data$Balance #Balance
response <- as.matrix(response)
predictors <- full_data[,-12]  #everythning but Balance
predictors <- as.matrix(predictors)
#rerunning model on the full data set
full_ridge = glmnet(x = predictors, y = response, intercept = FALSE, standardize = FALSE, lambda = cross_v$lambda.min, alpha = 0)
#getting coefficients and saving
ridge_coef <- coef(full_ridge)
save(ridge_coef, file = "../../data/full_coeffecients_ridge.RData")
#saving data from this model to a txt file
sink(file = "../../data/ridge_model.txt")
best_model_ridge
print("Coefficients for the Ridge Model")
best_model_ridge
print("MSE for the Ridge Model")
MSE_ridge
print("Coefficients for the model run on the full data set")
ridge_coef
sink()
library("glmnet")
library("lars")
library("MASS")
training_data <- read.csv(file = "../../data/training_data.csv")
training_data <- training_data[,-1]
#formatting response and predictors
response <- training_data$Balance #Balance
response <- as.matrix(response)
predictors <- training_data[,-12]  #everythning but Balance
predictors <- as.matrix(predictors)
grid <- 10^seq(10, -2, length = 100)
set.seed(100)
cross_v <- cv.glmnet(x = predictors, y = response, intercept = FALSE, standardize = FALSE, lambda = grid, alpha = 0)
best_model_ridge <- coef(cross_v, cross_v$lambda.min)[which(coef(cross_v, s = "lambda.min") != 0)]
#saving coefficients of the model
save(best_model_ridge, file = "../../data/ridge_model.RData")
#Adding Histograms to Images
png('../../images/CV_Errors_Ridge.png')
plot(cross_v, main = "CV Errors Ridge")
dev.off()
test_set <- read.csv(file = "../../data/test_data.csv")
response = test_set$Balance
test_set <- test_set[,-1]
test_set <- test_set[,-12]
test_predictors = as.matrix(test_set)
test_ridge <- predict(cross_v, newx = test_predictors, s = "lambda.min", type="response")
save(test_ridge,file =  "../../data/testing_ridge.RData")
source("../functions/mse_function.R")
MSE_ridge = MSE(test_ridge, response)
save(MSE_ridge, file = "../../data/MSE_ridge.RData" )
full_data <- read.csv(file = "../../data/scaled_credit.csv")
full_data <- full_data[,-1]
response <- full_data$Balance #Balance
response <- as.matrix(response)
predictors <- full_data[,-12]  #everythning but Balance
predictors <- as.matrix(predictors)
#rerunning model on the full data set
full_ridge = glmnet(x = predictors, y = response, intercept = FALSE, standardize = FALSE, lambda = cross_v$lambda.min, alpha = 0)
#getting coefficients and saving
ridge_coef <- coef(full_ridge)
save(ridge_coef, file = "../../data/full_coeffecients_ridge.RData")
#saving data from this model to a txt file
sink(file = "../../data/ridge_model.txt")
best_model_ridge
print("Coefficients for the Ridge Model")
best_model_ridge
print("MSE for the Ridge Model")
MSE_ridge
print("Coefficients for the model run on the full data set")
ridge_coef
sink()
require("pls")
training_data <- read.csv(file = "../../data/training_data.csv")
training_data <- training_data[,-1]
#formatting response and predictors
response <- training_data$Balance #Balance
response <- as.matrix(response)
predictors <- training_data[,-12]  #everythning but Balance
predictors <- as.matrix(predictors)
set.seed(100)
pcr_obj <- pcr(response ~ predictors, validation = "CV")
pcr_model <- pcr_obj$validation$PRESS
save(pcr_model, file = "../../data/pcr_model.RData")
#Adding Histograms to Images
png('../../images/CV_Errors_pcr.png')
validationplot(pcr_obj, val.type = "MSEP")
dev.off()
test_set <- read.csv(file = "../../data/test_data.csv")
response = test_set$Balance
test_set <- test_set[,-1]
test_set <- test_set[,-12]
test_predictors = as.matrix(test_set)
test_pcr <- predict(pcr_obj, newx = test_predictors, s = "validation$PRESS", type="response")
save(test_pcr,file =  "../../data/testing_pcr.RData")
source("../functions/mse_function.R")
MSE_pcr = MSE(test_pcr, response)
save(MSE_pcr, file = "../../data/MSE_pcr.RData")
full_data <- read.csv(file = "../../data/scaled_credit.csv")
full_data <- full_data[,-1]
response <- full_data$Balance #Balance
response <- as.matrix(response)
predictors <- full_data[,-12]  #everythning but Balance
predictors <- as.matrix(predictors)
#rerunning model on the full data set
full_pcr = pcr(response ~ predictors, validation = "CV")
#getting coefficients and saving
pcr_coef <- coef(full_pcr)
save(pcr_coef, file = "../../data/full_coeffecients_pcr.RData")
#saving  the important stuff
sink(file = "../../data/pcr_model.txt")
print("The PCR model")
pcr_model
print("The PCR MSE")
MSE_pcr
print("The coefficients on the full dataset")
full_pcr
sink()
MSE_pcr = MSE(test_pcr, response)
length(response)
length(test_pcr)
test_set <- read.csv(file = "../../data/test_data.csv")
test_set
test_set <- test_set[,-1]
test_set <- test_set[,-12]
test_predictors = as.matrix(test_set)
test_pcr <- predict(pcr_obj, newx = test_predictors, s = "validation$PRESS", type="response")
test_pcr
response
test_set
test_set <- read.csv(file = "../../data/test_data.csv")
colnames(test_set)
test_set <- read.csv(file = "../../data/test_data.csv")
test_set <- test_set[,-1]
response = test_set$Balance
test_set <- test_set[,-12]
test_predictors = as.matrix(test_set)
test_pcr <- predict(pcr_obj, newx = test_predictors, s = "validation$PRESS", type="response")
save(test_pcr,file =  "../../data/testing_pcr.RData")
source("../functions/mse_function.R")
MSE_pcr = MSE(test_pcr, response)
save(MSE_pcr, file = "../../data/MSE_pcr.RData")
test_set <- read.csv(file = "../../data/test_data.csv")
test_set
colnames(test_set)
test_set <- read.csv(file = "../../data/test_data.csv")
test_set <- test_set[,-1]
test_set
colnames(test_set)
response = test_set$Balance
response
test_set <- test_set[,-12]
test_predictors = as.matrix(test_set)
test_predictors
response
test_pcr <- predict(pcr_obj, newx = test_predictors, s = "validation$PRESS", type="response")
test_pcr
test_set <- read.csv(file = "../../data/test_data.csv")
response = test_set$Balance
test_set <- test_set[,-1]
test_set <- test_set[,-12]
test_predictors = as.matrix(test_set)
test_ridge <- predict(cross_v, newx = test_predictors, s = "lambda.min", type="response")
save(test_ridge,file =  "../../data/testing_ridge.RData")
source("../functions/mse_function.R")
MSE_ridge = MSE(test_ridge, response)
MSE_ridge
test_ridge
test_predictors
pcr_object
#formatting response and predictors
response <- training_data$Balance #Balance
response <- as.matrix(response)
predictors <- training_data[,-12]  #everythning but Balance
predictors <- as.matrix(predictors)
set.seed(100)
pcr_obj <- pcr(response ~ predictors, validation = "CV")
pcr_obj
test_pcr <- predict(pcr_obj, newx = test_predictors, s = "validation$PRESS", type="response")
save(test_pcr,file =  "../../data/testing_pcr.RData")
source("../functions/mse_function.R")
MSE_pcr = MSE(test_pcr, response)
save(MSE_pcr, file = "../../data/MSE_pcr.RData")
test_pcr
test_predictors
test_set <- read.csv(file = "../../data/test_data.csv")
test_set <- test_set[,-1]
response = test_set$Balance
test_set <- test_set[,-12]
test_predictors = as.matrix(test_set)
test_pcr <- predict(pcr_obj, newx = test_predictors, s = "validation$PRESS", type="response")
save(test_pcr,file =  "../../data/testing_pcr.RData")
test_pcr
test_ridge
test_predictors
test_ridge
?predict
tesT_pcr
test_pcr[1]
test_pcr[101]
test_pcr[100]
test_pcr[102]
test_pcr[99]
test_pcr[200]
test_pcr <- predict(pcr_obj, data = test_predictors, s = "validation$PRESS", type="response")
save(test_pcr,file =  "../../data/testing_pcr.RData")
test_pcr
test_pcr <- predict(pcr_obj, newx = test_predictors, s = "validation$PRESS", type="response")
test_pcr
test_pcr <- predict(pcr_obj, ncomp = 1, newx = test_predictors, s = "validation$PRESS", type="response")
save(test_pcr,file =  "../../data/testing_pcr.RData")
test_pcr
test_pcr <- predict(pcr_obj, ncomp = 1:10, newx = test_predictors, s = "validation$PRESS", type="response")
tesT_pcr
tesT_pcr
test_pcr
test_pcr <- predict(pcr_obj, newdata = test_predictors, s = "validation$PRESS", type="response")
test_pcr
test_pcr <- predict(pcr_obj, newdata = test_predictors, s = "validation$PRESS", type="response")
save(test_pcr,file =  "../../data/testing_pcr.RData")
source("../functions/mse_function.R")
MSE_pcr = MSE(test_pcr, response)
save(MSE_pcr, file = "../../data/MSE_pcr.RData")
test_pcr
response
source("../functions/mse_function.R")
MSE_pcr = MSE(test_pcr, response)
length(test_pcr)
test_pcr <- predict(pcr_obj, ncomp = 1, newdata = test_predictors, s = "validation$PRESS", type="response")
save(test_pcr,file =  "../../data/testing_pcr.RData")
source("../functions/mse_function.R")
MSE_pcr = MSE(test_pcr, response)
save(MSE_pcr, file = "../../data/MSE_pcr.RData")
MSE_pcr
test_pcr <- predict(pcr_obj, newx = test_predictors, s = "validation$PRESS", type="response")
save(test_pcr,file =  "../../data/testing_pcr.RData")
source("../functions/mse_function.R")
MSE_pcr = MSE(test_pcr, response)
MSE_pcr = MSE(test_pcr, response)
test_pcr <- predict(pcr_obj, newdata = test_predictors, s = "validation$PRESS", type="response")
test_pcr
test_pcr <- predict(pcr_obj,ncomp = 1, newdata = test_predictors, s = "validation$PRESS", type="response")
save(test_pcr,file =  "../../data/testing_pcr.RData")
MSE_pcr = MSE(test_pcr, response)
library("glmnet")
library("lars")
library("MASS")
training_data <- read.csv(file = "../../data/training_data.csv")
training_data <- training_data[,-1]
#formatting response and predictors
response <- training_data$Balance #Balance
response <- as.matrix(response)
predictors <- training_data[,-12]  #everythning but Balance
predictors <- as.matrix(predictors)
grid <- 10^seq(10, -2, length = 100)
set.seed(100)
cross_v <- cv.glmnet(x = predictors, y = response, intercept = FALSE, standardize = FALSE, lambda = grid, alpha = 0)
best_model_ridge <- coef(cross_v, cross_v$lambda.min)[which(coef(cross_v, s = "lambda.min") != 0)]
#saving coefficients of the model
save(best_model_ridge, file = "../../data/ridge_model.RData")
#Adding Histograms to Images
png('../../images/CV_Errors_Ridge.png')
plot(cross_v, main = "CV Errors Ridge")
dev.off()
test_set <- read.csv(file = "../../data/test_data.csv")
response = test_set$Balance
test_set <- test_set[,-1]
test_set <- test_set[,-12]
test_predictors = as.matrix(test_set)
test_ridge <- predict(cross_v, newx = test_predictors, s = "lambda.min", type="response")
save(test_ridge,file =  "../../data/testing_ridge.RData")
source("../functions/mse_function.R")
MSE_ridge = MSE(test_ridge, response)
save(MSE_ridge, file = "../../data/MSE_ridge.RData" )
full_data <- read.csv(file = "../../data/scaled_credit.csv")
full_data <- full_data[,-1]
response <- full_data$Balance #Balance
response <- as.matrix(response)
predictors <- full_data[,-12]  #everythning but Balance
predictors <- as.matrix(predictors)
#rerunning model on the full data set
full_ridge = glmnet(x = predictors, y = response, intercept = FALSE, standardize = FALSE, lambda = cross_v$lambda.min, alpha = 0)
#getting coefficients and saving
ridge_coef <- coef(full_ridge)
save(ridge_coef, file = "../../data/full_coeffecients_ridge.RData")
#saving data from this model to a txt file
sink(file = "../../data/ridge_model.txt")
best_model_ridge
print("Coefficients for the Ridge Model")
best_model_ridge
print("MSE for the Ridge Model")
MSE_ridge
print("Coefficients for the model run on the full data set")
ridge_coef
sink()
library("glmnet")
?gmlet
?glmnet
install.packages("glmnet")
install.packages("glmnet")
library("glmnet")
training_data <- read.csv("./data/training_data.csv")
training_data <- read.csv("./data/training-data.csv")
training_data <- read.csv("../../data/training-data.csv")
training_data <- training_data[,-1]
ols <- lm(Balance ~ Income + Limit + Rating + Cards + Age + Education + GenderFemale + StudentYes + MarriedYes + EthnicityAsian + EthnicityCaucasian, training_data)
summary(ols)
ols_coefficients <- coef(ols)
ols_coefficients
ols_coef <- coef(ols)
save(ols_coef, file = "../../data/ols_coef.RData")
MSE_ols <- MSE(test_plsr, test_response)
source("../functions/mse_function.R")
MSE_ols <- MSE(test_plsr, test_response)
test_pcr <- predict(ols, newdata = test_predictors, s = "validation$PRESS", type="response")
test_pcr <- predict(ols, newdata = test_predictors type="response")
test_pcr <- predict(ols, newdata = test_predictors type ="response")
test_pcr <- predict(ols, newdata = test_predictors, type ="response")
test_set <- read.csv(file = "../../data/test_data.csv")
response = test_set$Balance
test_set <- test_set[,-1]
test_set <- test_set[,-12]
test_predictors = as.matrix(test_set)
test_pcr <- predict(ols, newdata = test_predictors, type ="response")
test_predictors = as.data.frame(test_set)
test_pcr <- predict(ols, newdata = test_predictors, type ="response")
source("../functions/mse_function.R")
MSE_ols <- MSE(test_plsr, test_response)
ols_coef
ols_coef
ols_coef
test_set <- read.csv(file = "../../data/test_data.csv")
response = test_set$Balance
test_set <- test_set[,-1]
test_set <- test_set[,-12]
test_predictors = as.data.frame(test_set)
test_ols <- predict(ols, newdata = test_predictors, type ="response")
source("../functions/mse_function.R")
MSE_ols <- MSE(test_ols, test_response)
MSE_ols <- MSE(test_ols, response)
MSE_ols
save(ols_coef, file = "../../data/ols_coef.RData")
save(MSE_ols, file = "../../data/ols_MSE.RData")
