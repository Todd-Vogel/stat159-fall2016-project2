}
}
new_merge$`access time` <- new_merge$accessed-new_merge$created.y
time.avg <- aggregate(`access time`~ force, data = new_merge, FUN = function(x) median = median(x))
time.avg$`access time` <- round(time.avg$`access time`)
colnames(time.avg)[2] <- "Time til Accessed (Days)"
View(new.data)
View(past.data)
library('ggplot2')
library('plyr')
library('knitr')
library('lubridate')
library('VennDiagram')
library('RCurl')
police_rep_online <- getURL('http://dev.myevidence.org/utilities/police_data_access.php', userpwd = 'todd:Ainem2eigh')
write(police_rep_online, file = 'online_database.csv')
police_report <- read.csv('online_database.csv')
police_access_online <- getURL('http://dev.myevidence.org/utilities/police_access_access.php', userpwd = 'todd:Ainem2eigh')
write(police_access_online, file = 'online_accesslog.csv')
police_access <- read.csv('online_accesslog.csv')
## Clean police access
police_access <- police_access[!grepl("gt.witnessconfident@gmail.com", police_access$email_used, ignore.case = TRUE),]
police_access <- police_access[!grepl("geoff.tibbs@witnessconfident.org", police_access$email_used, ignore.case = TRUE),]
police_access <- police_access[!grepl("selfevident@justevidence.org", police_access$email_used, ignore.case = TRUE),]
police_access <- police_access[grepl("^used_.*", police_access$password, ignore.case = TRUE),]
police_access <- subset(police_access, !duplicated(police_access[,2]))
x <- merge(police_access, police_report, by = "report_id", all.y = TRUE)
x$force <- gsub(" \\[UK\\]", "", x$force)
for (i in 1:nrow(x)) {
if (x[i,16] == 1) {
x[i,25] <- 'metropolitan hate crime'
} else if (x[i,16] == 2) {
x[i,25] <- 'sussex hate crime'
}
}
x_1 <- count(x, "force")
colnames(x_1)[2] <- "Number Reported"
y <- merge(police_access, police_report, by = 'report_id', all.x = TRUE)
y$force <- gsub(" \\[UK\\]", "", y$force)
y$where_you_live[is.na(y$where_you_live)] <- 0
for (i in 1:nrow(y)) {
if (y[i,16] == 1) {
y[i,25] <- 'metropolitan hate crime'
} else if (y[i,16] == 2) {
y[i,25] <- 'sussex hate crime'
}
}
y_1 <- count(y, "force")
colnames(y_1)[2] <- "Number Accessed"
access_data <- merge(x_1, y_1, by = "force", all.x = TRUE)
percent1 <- round((access_data$`Number Accessed`/access_data$`Number Reported`) * 100)
access_data$`Percent Accessed`  <- paste(percent1, '%', sep = "")
access_data <- access_data[order(-access_data[,3]),]
access_data <- access_data[!grepl('^$', access_data$force),]
x$created.y <- gsub(" ([0123456789]{2}:[0123456789]{2}:[0123456789]{2})$", "", x$created.y)
for (i in 1:nrow(x)) {
if (x[i, 10] >= new_quarter) {
x[i,10] <- "Quarter to Date"
} else if (old_quarter <= x[i, 10] & x[i,10] < new_quarter) {
x[i,10] <- "Past Quarter"
} else {
x[i,10] <- "All-Time"
}
}
present_quarter <- x[grep("Quarter to Date", x$created.y),]
report1 <- count(present_quarter, "force")
colnames(report1)[2] <- "Reports Quarter to Date"
present_access <- present_quarter[!is.na(present_quarter$accessed),]
access1 <- count(present_access, "force")
colnames(access1)[2] <- "Accessed Quarter to Date"
to.date.data <- merge(report1, access1, by = "force", all.x = TRUE)
to.date.data[is.na(to.date.data)] <- 0
percent2 <- round((to.date.data$`Accessed Quarter to Date`/to.date.data$`Reports Quarter to Date`) * 100)
to.date.data$`Percent Accessed`  <- paste(percent2, '%', sep = "")
to.date.data <- to.date.data[order(-to.date.data[,3]),]
to.date.data <- to.date.data[!grepl('^$', to.date.data$force),]
new.data <- merge(access_data, to.date.data, by = 'force')
past_quarter <- x[grep("Past Quarter", x$created.y),]
report2 <- count(past_quarter, "force")
colnames(report2)[2] <- "Reports Past Quarter"
past_access <- past_quarter[!is.na(past_quarter$accessed),]
access2 <- count(past_access, "force")
colnames(access2)[2] <- "Accessed Past Quarter"
past.data <- merge(report2, access2, by = "force", all.x = TRUE)
past.data[is.na(past.data)] <- 0
percent3 <- round((past.data$`Accessed Past Quarter`/past.data$`Reports Past Quarter`) * 100)
past.data$`Percent Accessed`  <- paste(percent3, '%', sep = "")
past.data <- past.data[order(-past.data[,3]),]
past.data <- past.data[!grepl('^$', past.data$force),]
full_accessed_data <- merge(new.data, past.data, by = 'force')
full_accessed_data <- full_accessed_data[order(-full_accessed_data[,3]),]
full_accessed_data$`Number Not Accessed` <- full_accessed_data$`Number Reported` - full_accessed_data$`Number Accessed`
percent4 <- round((full_accessed_data$`Number Not Accessed` / full_accessed_data$`Number Reported`) * 100)
full_accessed_data$`Percent Not Accessed`  <- paste(percent4, '%', sep = "")
new_merge <- merge(police_access, police_report, by = "report_id", all.y = TRUE)
new_merge$created.y <- gsub(" ([0123456789]{2}:[0123456789]{2}:[0123456789]{2})$", "", new_merge$created.y)
new_merge$created.y <- as.Date(new_merge$created.y)
new_merge$accessed <- gsub(" ([0123456789]{2}:[0123456789]{2}:[0123456789]{2})$", "", new_merge$accessed)
new_merge$accessed <- as.Date(new_merge$accessed)
new_merge$force <- gsub(" \\[UK\\]", "", new_merge$force)
for (i in 1:nrow(new_merge)) {
if (new_merge[i,16] == 1) {
new_merge[i,25] <- 'metropolitan hate crime'
} else if (new_merge[i,16] == 2) {
new_merge[i,25] <- 'sussex hate crime'
}
}
new_merge$`access time` <- new_merge$accessed-new_merge$created.y
time.avg <- aggregate(`access time`~ force, data = new_merge, FUN = function(x) median = median(x))
time.avg$`access time` <- round(time.avg$`access time`)
colnames(time.avg)[2] <- "Time til Accessed (Days)"
full_accessed_data <- merge(full_accessed_data, time.avg, by = "force")
full_accessed_data <- full_accessed_data[order(-full_accessed_data[,2]),]
colnames(full_accessed_data)[c(4,7,10)] <- c("Percent Accessed", "Percent Accessed Quarter to Date", "Percent Accessed Past Quarter")
View(full_accessed_data)
library('ggplot2')
library('plyr')
library('knitr')
library('lubridate')
library('VennDiagram')
library('RCurl')
police_rep_online <- getURL('http://dev.myevidence.org/utilities/police_data_access.php', userpwd = 'todd:Ainem2eigh')
write(police_rep_online, file = 'online_database.csv')
police_report <- read.csv('online_database.csv')
police_access_online <- getURL('http://dev.myevidence.org/utilities/police_access_access.php', userpwd = 'todd:Ainem2eigh')
write(police_access_online, file = 'online_accesslog.csv')
police_access <- read.csv('online_accesslog.csv')
## Clean police access
police_access <- police_access[!grepl("gt.witnessconfident@gmail.com", police_access$email_used, ignore.case = TRUE),]
police_access <- police_access[!grepl("geoff.tibbs@witnessconfident.org", police_access$email_used, ignore.case = TRUE),]
police_access <- police_access[!grepl("selfevident@justevidence.org", police_access$email_used, ignore.case = TRUE),]
police_access <- police_access[grepl("^used_.*", police_access$password, ignore.case = TRUE),]
police_access <- subset(police_access, !duplicated(police_access[,2]))
x <- merge(police_access, police_report, by = "report_id", all.y = TRUE)
x$force <- gsub(" \\[UK\\]", "", x$force)
for (i in 1:nrow(x)) {
if (x[i,16] == 1) {
x[i,25] <- 'metropolitan hate crime'
} else if (x[i,16] == 2) {
x[i,25] <- 'sussex hate crime'
}
}
x_1 <- count(x, "force")
colnames(x_1)[2] <- "Number Reported"
y <- merge(police_access, police_report, by = 'report_id', all.x = TRUE)
y$force <- gsub(" \\[UK\\]", "", y$force)
y$where_you_live[is.na(y$where_you_live)] <- 0
for (i in 1:nrow(y)) {
if (y[i,16] == 1) {
y[i,25] <- 'metropolitan hate crime'
} else if (y[i,16] == 2) {
y[i,25] <- 'sussex hate crime'
}
}
y_1 <- count(y, "force")
colnames(y_1)[2] <- "Number Accessed"
access_data <- merge(x_1, y_1, by = "force", all.x = TRUE)
percent1 <- round((access_data$`Number Accessed`/access_data$`Number Reported`) * 100)
access_data$`Percent Accessed`  <- paste(percent1, '%', sep = "")
access_data <- access_data[order(-access_data[,3]),]
access_data <- access_data[!grepl('^$', access_data$force),]
x$created.y <- gsub(" ([0123456789]{2}:[0123456789]{2}:[0123456789]{2})$", "", x$created.y)
for (i in 1:nrow(x)) {
if (x[i, 10] >= new_quarter) {
x[i,10] <- "Quarter to Date"
} else if (old_quarter <= x[i, 10] & x[i,10] < new_quarter) {
x[i,10] <- "Past Quarter"
} else {
x[i,10] <- "All-Time"
}
}
present_quarter <- x[grep("Quarter to Date", x$created.y),]
report1 <- count(present_quarter, "force")
colnames(report1)[2] <- "Reports Quarter to Date"
present_access <- present_quarter[!is.na(present_quarter$accessed),]
access1 <- count(present_access, "force")
colnames(access1)[2] <- "Accessed Quarter to Date"
to.date.data <- merge(report1, access1, by = "force", all.x = TRUE)
to.date.data[is.na(to.date.data)] <- 0
percent2 <- round((to.date.data$`Accessed Quarter to Date`/to.date.data$`Reports Quarter to Date`) * 100)
to.date.data$`Percent Accessed`  <- paste(percent2, '%', sep = "")
to.date.data <- to.date.data[order(-to.date.data[,3]),]
to.date.data <- to.date.data[!grepl('^$', to.date.data$force),]
new.data <- merge(access_data, to.date.data, by = 'force')
past_quarter <- x[grep("Past Quarter", x$created.y),]
report2 <- count(past_quarter, "force")
colnames(report2)[2] <- "Reports Past Quarter"
past_access <- past_quarter[!is.na(past_quarter$accessed),]
access2 <- count(past_access, "force")
colnames(access2)[2] <- "Accessed Past Quarter"
past.data <- merge(report2, access2, by = "force", all.x = TRUE)
past.data[is.na(past.data)] <- 0
percent3 <- round((past.data$`Accessed Past Quarter`/past.data$`Reports Past Quarter`) * 100)
past.data$`Percent Accessed`  <- paste(percent3, '%', sep = "")
past.data <- past.data[order(-past.data[,3]),]
past.data <- past.data[!grepl('^$', past.data$force),]
full_accessed_data <- merge(new.data, past.data, by = 'force')
full_accessed_data <- full_accessed_data[order(-full_accessed_data[,3]),]
full_accessed_data$`Number Not Accessed` <- full_accessed_data$`Number Reported` - full_accessed_data$`Number Accessed`
percent4 <- round((full_accessed_data$`Number Not Accessed` / full_accessed_data$`Number Reported`) * 100)
full_accessed_data$`Percent Not Accessed`  <- paste(percent4, '%', sep = "")
new_merge <- merge(police_access, police_report, by = "report_id", all.y = TRUE)
#new_merge$created.y <- gsub(" ([0123456789]{2}:[0123456789]{2}:[0123456789]{2})$", "", new_merge$created.y)
new_merge$created.y <- as.Date(new_merge$created.y)
#new_merge$accessed <- gsub(" ([0123456789]{2}:[0123456789]{2}:[0123456789]{2})$", "", new_merge$accessed)
new_merge$accessed <- as.Date(new_merge$accessed)
new_merge$force <- gsub(" \\[UK\\]", "", new_merge$force)
for (i in 1:nrow(new_merge)) {
if (new_merge[i,16] == 1) {
new_merge[i,25] <- 'metropolitan hate crime'
} else if (new_merge[i,16] == 2) {
new_merge[i,25] <- 'sussex hate crime'
}
}
new_merge$`access time` <- new_merge$accessed-new_merge$created.y
time.avg <- aggregate(`access time`~ force, data = new_merge, FUN = function(x) median = median(x))
time.avg$`access time` <- round(time.avg$`access time`)
colnames(time.avg)[2] <- "Time til Accessed (Days)"
full_accessed_data <- merge(full_accessed_data, time.avg, by = "force")
full_accessed_data <- full_accessed_data[order(-full_accessed_data[,2]),]
colnames(full_accessed_data)[c(4,7,10)] <- c("Percent Accessed", "Percent Accessed Quarter to Date", "Percent Accessed Past Quarter")
View(new_merge)
new_merge$created.y
View(police_access)
View(police_report)
new_merge <- merge(police_access, police_report, by = "report_id", all.y = TRUE)
new_merge$created.y <- as.Date(new_merge$created.y)
new_merge <- merge(police_access, police_report, by = "report_id", all.y = TRUE)
new_merge$force <- gsub(" \\[UK\\]", "", new_merge$force)
for (i in 1:nrow(new_merge)) {
if (new_merge[i,16] == 1) {
new_merge[i,25] <- 'metropolitan hate crime'
} else if (new_merge[i,16] == 2) {
new_merge[i,25] <- 'sussex hate crime'
}
}
new_merge$`access time` <- new_merge$accessed-new_merge$created.y
time.avg <- aggregate(`access time`~ force, data = new_merge, FUN = function(x) median = median(x))
time.avg$`access time` <- round(time.avg$`access time`)
colnames(time.avg)[2] <- "Time til Accessed (Days)"
full_accessed_data <- merge(full_accessed_data, time.avg, by = "force")
full_accessed_data <- full_accessed_data[order(-full_accessed_data[,2]),]
colnames(full_accessed_data)[c(4,7,10)] <- c("Percent Accessed", "Percent Accessed Quarter to Date", "Percent Accessed Past Quarter")
new_merge <- merge(police_access, police_report, by = "report_id", all.y = TRUE)
new_merge$created.y <- as.POSIXct(new_merge$created.y)
new_merge$accessed <- as.POSIXct(new_merge$accessed)
new_merge$force <- gsub(" \\[UK\\]", "", new_merge$force)
for (i in 1:nrow(new_merge)) {
if (new_merge[i,16] == 1) {
new_merge[i,25] <- 'metropolitan hate crime'
} else if (new_merge[i,16] == 2) {
new_merge[i,25] <- 'sussex hate crime'
}
}
new_merge$`access time` <- new_merge$accessed-new_merge$created.y
time.avg <- aggregate(`access time`~ force, data = new_merge, FUN = function(x) median = median(x))
time.avg$`access time` <- round(time.avg$`access time`)
colnames(time.avg)[2] <- "Time til Accessed (Days)"
full_accessed_data <- merge(full_accessed_data, time.avg, by = "force")
full_accessed_data <- full_accessed_data[order(-full_accessed_data[,2]),]
colnames(full_accessed_data)[c(4,7,10)] <- c("Percent Accessed", "Percent Accessed Quarter to Date", "Percent Accessed Past Quarter")
library('ggplot2')
library('plyr')
library('knitr')
library('lubridate')
library('VennDiagram')
library('RCurl')
police_rep_online <- getURL('http://dev.myevidence.org/utilities/police_data_access.php', userpwd = 'todd:Ainem2eigh')
write(police_rep_online, file = 'online_database.csv')
police_report <- read.csv('online_database.csv')
police_access_online <- getURL('http://dev.myevidence.org/utilities/police_access_access.php', userpwd = 'todd:Ainem2eigh')
write(police_access_online, file = 'online_accesslog.csv')
police_access <- read.csv('online_accesslog.csv')
## Clean police access
police_access <- police_access[!grepl("gt.witnessconfident@gmail.com", police_access$email_used, ignore.case = TRUE),]
police_access <- police_access[!grepl("geoff.tibbs@witnessconfident.org", police_access$email_used, ignore.case = TRUE),]
police_access <- police_access[!grepl("selfevident@justevidence.org", police_access$email_used, ignore.case = TRUE),]
police_access <- police_access[grepl("^used_.*", police_access$password, ignore.case = TRUE),]
police_access <- subset(police_access, !duplicated(police_access[,2]))
x <- merge(police_access, police_report, by = "report_id", all.y = TRUE)
x$force <- gsub(" \\[UK\\]", "", x$force)
for (i in 1:nrow(x)) {
if (x[i,16] == 1) {
x[i,25] <- 'metropolitan hate crime'
} else if (x[i,16] == 2) {
x[i,25] <- 'sussex hate crime'
}
}
x_1 <- count(x, "force")
colnames(x_1)[2] <- "Number Reported"
y <- merge(police_access, police_report, by = 'report_id', all.x = TRUE)
y$force <- gsub(" \\[UK\\]", "", y$force)
y$where_you_live[is.na(y$where_you_live)] <- 0
for (i in 1:nrow(y)) {
if (y[i,16] == 1) {
y[i,25] <- 'metropolitan hate crime'
} else if (y[i,16] == 2) {
y[i,25] <- 'sussex hate crime'
}
}
y_1 <- count(y, "force")
colnames(y_1)[2] <- "Number Accessed"
access_data <- merge(x_1, y_1, by = "force", all.x = TRUE)
percent1 <- round((access_data$`Number Accessed`/access_data$`Number Reported`) * 100)
access_data$`Percent Accessed`  <- paste(percent1, '%', sep = "")
access_data <- access_data[order(-access_data[,3]),]
access_data <- access_data[!grepl('^$', access_data$force),]
x$created.y <- gsub(" ([0123456789]{2}:[0123456789]{2}:[0123456789]{2})$", "", x$created.y)
for (i in 1:nrow(x)) {
if (x[i, 10] >= new_quarter) {
x[i,10] <- "Quarter to Date"
} else if (old_quarter <= x[i, 10] & x[i,10] < new_quarter) {
x[i,10] <- "Past Quarter"
} else {
x[i,10] <- "All-Time"
}
}
present_quarter <- x[grep("Quarter to Date", x$created.y),]
report1 <- count(present_quarter, "force")
colnames(report1)[2] <- "Reports Quarter to Date"
present_access <- present_quarter[!is.na(present_quarter$accessed),]
access1 <- count(present_access, "force")
colnames(access1)[2] <- "Accessed Quarter to Date"
to.date.data <- merge(report1, access1, by = "force", all.x = TRUE)
to.date.data[is.na(to.date.data)] <- 0
percent2 <- round((to.date.data$`Accessed Quarter to Date`/to.date.data$`Reports Quarter to Date`) * 100)
to.date.data$`Percent Accessed`  <- paste(percent2, '%', sep = "")
to.date.data <- to.date.data[order(-to.date.data[,3]),]
to.date.data <- to.date.data[!grepl('^$', to.date.data$force),]
new.data <- merge(access_data, to.date.data, by = 'force')
past_quarter <- x[grep("Past Quarter", x$created.y),]
report2 <- count(past_quarter, "force")
colnames(report2)[2] <- "Reports Past Quarter"
past_access <- past_quarter[!is.na(past_quarter$accessed),]
access2 <- count(past_access, "force")
colnames(access2)[2] <- "Accessed Past Quarter"
past.data <- merge(report2, access2, by = "force", all.x = TRUE)
past.data[is.na(past.data)] <- 0
percent3 <- round((past.data$`Accessed Past Quarter`/past.data$`Reports Past Quarter`) * 100)
past.data$`Percent Accessed`  <- paste(percent3, '%', sep = "")
past.data <- past.data[order(-past.data[,3]),]
past.data <- past.data[!grepl('^$', past.data$force),]
full_accessed_data <- merge(new.data, past.data, by = 'force')
full_accessed_data <- full_accessed_data[order(-full_accessed_data[,3]),]
full_accessed_data$`Number Not Accessed` <- full_accessed_data$`Number Reported` - full_accessed_data$`Number Accessed`
percent4 <- round((full_accessed_data$`Number Not Accessed` / full_accessed_data$`Number Reported`) * 100)
full_accessed_data$`Percent Not Accessed`  <- paste(percent4, '%', sep = "")
new_merge <- merge(police_access, police_report, by = "report_id", all.y = TRUE)
#new_merge$created.y <- gsub(" ([0123456789]{2}:[0123456789]{2}:[0123456789]{2})$", "", new_merge$created.y)
new_merge$created.y <- as.POSIXct(new_merge$created.y)
#new_merge$accessed <- gsub(" ([0123456789]{2}:[0123456789]{2}:[0123456789]{2})$", "", new_merge$accessed)
new_merge$accessed <- as.POSIXct(new_merge$accessed)
new_merge$force <- gsub(" \\[UK\\]", "", new_merge$force)
for (i in 1:nrow(new_merge)) {
if (new_merge[i,16] == 1) {
new_merge[i,25] <- 'metropolitan hate crime'
} else if (new_merge[i,16] == 2) {
new_merge[i,25] <- 'sussex hate crime'
}
}
new_merge$`access time` <- new_merge$accessed-new_merge$created.y
time.avg <- aggregate(`access time`~ force, data = new_merge, FUN = function(x) median = median(x))
time.avg$`access time` <- round(time.avg$`access time`)
colnames(time.avg)[2] <- "Time til Accessed (Minutes)"
full_accessed_data <- merge(full_accessed_data, time.avg, by = "force")
full_accessed_data <- full_accessed_data[order(-full_accessed_data[,2]),]
colnames(full_accessed_data)[c(4,7,10)] <- c("Percent Accessed", "Percent Accessed Quarter to Date", "Percent Accessed Past Quarter")
for (i in 1:nrow(new_merge)) {
if (new_merge[i,16] == 1) {
new_merge[i,25] <- 'metropolitan hate crime'
} else if (new_merge[i,16] == 2) {
new_merge[i,25] <- 'sussex hate crime'
}
}
View(new_merge)
View(x)
View(x_1)
View(y)
View(y_1)
range_value <- function(x) {
max(x) - min(x)
}
missing_values <- function(x) {
missing_values <- function(x) {
missing_values <- function(x) {
sum(is.na(x))
}
x <- c(1, 2, 3, 4, 5)
y <- c(1, 2, 3, 4, NA)
z <- c(TRUE, FALSE, TRUE)
w <- letters[1:5]
install.packages("testthat")
install.packages("testthat")
library("testthat")
x <- c(1, 2, 3, 4, 5)
y <- c(1, 2, 3, 4, NA)
z <- c(TRUE, FALSE, TRUE)
w <- letters[1:5]
source("../functions/functions.R")
context("Test for range value")
test_that("range works as expected", {
x <- c(1, 2, 3, 4, 5)
expect_equal(range_value(x), 4)
expect_length(range_value(x), 1)
expect_type(range_value(x), 'double')
source("../functions/range-value.R")
x <- c(1, 2, 3, 4, 5)
y <- c(1, 2, 3, 4, NA)
z <- c(TRUE, FALSE, TRUE)
w <- letters[1:5]
source("../functions/range-value.R")
context("Test for range value")
getwd()
y <- (1,2,3,4,NA)
y <- c(1,2,3,4,NA)
na.rm(y)
install.packages(xtable)
install.packages('xtable')
?set.seed()
library(xtable)
MSE_ridge
load('../../data/MSE_ols.RData')
load('../../data/MSE_ridge.RData')
load('../../data/MSE_pcr.RData')
load('../../data/mse_lasso.RData')
load('../../data/mse_plsr.RData')
get(wd)
getwd()
setwd("/Users/toddvogel/Documents/Senior Year/stat159-fall2016-project2/report/sections")
setwd("/Users/toddvogel/Documents/Senior Year/stat159-fall2016-project2/report/sections")
load('../../data/MSE_ols.RData')
load('../../data/MSE_ridge.RData')
load('../../data/MSE_pcr.RData')
load('../../data/mse_lasso.RData')
load('../../data/mse_plsr.RData')
library(xtable)
MSE_ridge
is.vector(MSE_ols)
Model <- c(OLS, Ridge, Lasso, PCR, PLSR)
MSE_ols
lasso_mse
MSE_ridge
MSE
MSE <- c(MSE_ols, MSE_ridge, lasso_mse, MSE_pcr, plsr_mse)
MSE
load('../../data/lasso_model.RData')
bestmodel_lasso
is.vector(bestmodel_lasso)
as.vector(bestmodel_lasso)
load('../../data/ols_model.RData')
load('../../data/ridge_model.RData')
load('../../data/lasso_model.RData')
load('../../data/pcr_model.RData')
load('../../data/plsr_model.RData')
ols_coef
is.vector(ols_coef)
as.vector(ols_coef)
as.vector(best_model_ridge)
as.vector(plsr_coef)
as.vector(ols_coef)
as.vector(pcr_coef)
as.vector(plsr_coef)
ols_coef
est_model_ridge
best_model_ridge
(bestmodel_lasso
)
best_model_ridge
plsr_coef
pcr_coef
as.vector(0, pcr_coef)
PCR <- append(PCR, 0, 0)
PCR <- as.vector(pcr_coef)
PCR <- append(PCR, 0, 0)
PCR
best_model_ridge
best_model_ridge
load('../../data/ridge_model.RData')
Ridge <- as.vector(best_model_ridge)
best_model_ridg
best_model_ridge
load('../../data/ridge_model.RData')
best_model_ridge
bestmodel_lasso
best_model_ridge
load('../../data/ridge_model.RData')
best_model_ridge
Ridge <- as.vector(best_model_ridge)
Ridge
pcr_coef
require("pls")
training_data <- read.csv(file = "../../data/training_data.csv")
training_data <- training_data[,-1]
#formatting response and predictors
response <- training_data$Balance #Balance
response <- as.matrix(response)
predictors <- training_data[,-12]  #everythning but Balance
predictors <- as.matrix(predictors)
set.seed(100)
pcr_obj <- pcr(response ~ predictors, validation = "CV")
pcr_obj$coefficients
pcr_model <-min(pcr_obj$validation$PRESS)
pcr_model
pcr_model <-pcr_obj$validation$PRESS
pcr_model
pcr_obj$model
best_model_ridge
PCR[1]
PCR[2]
type(PCR[2])
is.character(PCR[2])
is.numeric(PCR[2])
