if (split_sent[i] == " ") {
new_sent <- c(cat(new_sent, curr_word, sep = " "))
curr_word <- c("")
i <- i - 1
} else {
curr_word <- cat(split_sent[i], curr_word, sep = '')
print("After the cat")
print(curr_word)
i <- i - 1
}
}
return(new_sent)
}
reverse_words("sentence! this reverse")
reverse_words <- function(words) {
split_sent <- split_chars(words)
i <- length(split_sent)
curr_word <- c('')
new_sent <- c('')
while(i != 0) {
#print(curr_word)
if (split_sent[i] == " ") {
new_sent <- c(cat(new_sent, curr_word, sep = " "))
curr_word <- c("")
i <- i - 1
} else {
curr_word <- cat(split_sent[i], curr_word, sep = '')
#print("After the cat")
#print(curr_word)
i <- i - 1
}
}
return(new_sent)
}
reverse_words("sentence! this reverse")
?cat
cat("pplpwle", "wefoiwhef", sep = "    ")
var <- cat("pplpwle", "wefoiwhef", sep = "    ")
car
var
var
varv
var
var <- paste
var <- paste("wefowehof", "wefowefw", sep = "  ")
var
reverse_words <- function(words) {
split_sent <- split_chars(words)
i <- length(split_sent)
curr_word <- c('')
new_sent <- c('')
while(i != 0) {
print(curr_word)
if (split_sent[i] == " ") {
new_sent <- c(paste(new_sent, curr_word, sep = " "))
curr_word <- c("")
i <- i - 1
} else {
curr_word <- paste(split_sent[i], curr_word, sep = '')
print("After the cat")
print(curr_word)
i <- i - 1
}
}
return(new_sent)
}
reverse_words("sentence! this reverse")
reverse_words <- function(words) {
split_sent <- split_chars(words)
i <- length(split_sent)
curr_word <- c('')
new_sent <- c('')
while(i != 0) {
if (split_sent[i] == " ") {
new_sent <- c(paste(new_sent, curr_word, sep = " "))
curr_word <- c("")
i <- i - 1
} else {
curr_word <- paste(split_sent[i], curr_word, sep = '')
i <- i - 1
}
}
return(new_sent)
}
reverse_words("sentence! this reverse")
reverse_words <- function(words) {
split_sent <- split_chars(words)
i <- length(split_sent)
curr_word <- c('')
new_sent <- c('')
while(i != 0) {
if (split_sent[i] == " ") {
new_sent <- c(paste(new_sent, curr_word, sep = " "))
curr_word <- c("")
i <- i - 1
} else {
curr_word <- paste(split_sent[i], curr_word, sep = '')
i <- i - 1
}
}
new_sent <- c(paste(new_sent, curr_word, sep = " "))
return(new_sent)
}
reverse_words("sentence! this reverse")
reverse_words <- function(words) {
split_sent <- split_chars(words)
i <- length(split_sent)
curr_word <- c('')
new_sent <- c('')
while(i != 0) {
if (split_sent[i] == " ") {
new_sent <- c(paste(new_sent, curr_word, sep = " "))
curr_word <- c("")
i <- i - 1
} else {
curr_word <- paste(split_sent[i], curr_word, sep = '')
i <- i - 1
}
}
new_sent <- c(paste(new_sent, curr_word, sep = ""))
return(new_sent)
}
reverse_words("sentence! this reverse")
reverse_words <- function(words) {
split_sent <- split_chars(words)
i <- length(split_sent)
curr_word <- c('')
new_sent <- c('')
while(i != 0) {
if (split_sent[i] == " ") {
temp <- paste(new_sent, curr_word, sep = " ")
new_sent <- c(str_replace_all(temp, fixed(" "), ""))
curr_word <- c("")
i <- i - 1
} else {
curr_word <- paste(split_sent[i], curr_word, sep = '')
i <- i - 1
}
}
new_sent <- c(paste(new_sent, curr_word, sep = " "))
return(new_sent)
}
reverse_words("sentence! this reverse")
library(stringr)
reverse_words <- function(words) {
split_sent <- split_chars(words)
i <- length(split_sent)
curr_word <- c('')
new_sent <- c('')
while(i != 0) {
if (split_sent[i] == " ") {
temp <- paste(new_sent, curr_word, sep = " ")
new_sent <- c(str_replace_all(temp, fixed(" "), ""))
curr_word <- c("")
i <- i - 1
} else {
curr_word <- paste(split_sent[i], curr_word, sep = '')
i <- i - 1
}
}
new_sent <- c(paste(new_sent, curr_word, sep = " "))
return(new_sent)
}
reverse_words("sentence! this reverse")
library(stringr)
reverse_words <- function(words) {
split_sent <- split_chars(words)
i <- length(split_sent)
curr_word <- c('')
new_sent <- c('')
while(i != 0) {
if (split_sent[i] == " ") {
str_replace_all(curr_word, fixed(" "), "")
new_sent <- paste(new_sent, curr_word, sep = " ")
curr_word <- c("")
i <- i - 1
} else {
curr_word <- paste(split_sent[i], curr_word, sep = '')
i <- i - 1
}
}
new_sent <- c(paste(new_sent, curr_word, sep = " "))
return(new_sent)
}
reverse_words("sentence! this reverse")
?str_split
reverse_words <- function(words) {
print(str_split(words, " "))
}
reverse_words("sentence! this reverse")
reverse_words <- function(words) {
splitted <- str_split(words, " ")
split_now <- splitted
for (i in 1:length(splitted)) {
split_now[i] <- splitted[length(splitted) - i + 1]
}
return(split_now)
}
reverse_words("sentence! this reverse")
reverse_words <- function(words) {
splitted <- str_split(words, " ")
split_now <- splitted
for (i in 1:length(splitted)) {
split_now[i] <- splitted[length(splitted) - i + 1]
}
return(split_now)
}
reverse_words("sentence! this reverse")
reverse_words <- function(words) {
splitted <- str_split(words, " ")
print(length(splitted))
split_now <- splitted
for (i in 1:length(splitted)) {
split_now[i] <- splitted[length(splitted) - i + 1]
}
return(split_now)
}
reverse_words("sentence! this reverse")
reverse_words <- function(words) {
splitted <- str_split(words, " ")
print(length(splitted[[1]]))
split_now <- splitted
for (i in 1:length(splitted)) {
split_now[i] <- splitted[length(splitted) - i + 1]
}
return(split_now)
}
reverse_words("sentence! this reverse")
reverse_words <- function(words) {
splitted <- str_split(words, " ")[[1]]
split_now <- splitted
for (i in 1:length(splitted)) {
split_now[i] <- splitted[length(splitted) - i + 1]
}
return(split_now)
}
reverse_words("sentence! this reverse")
reverse_words <- function(words) {
splitted <- str_split(words, " ")[[1]]
split_now <- splitted
for (i in 1:length(splitted)) {
split_now[i] <- splitted[length(splitted) - i + 1]
}
return(paste(split_now, sep = " ")
}
reverse_words <- function(words) {
splitted <- str_split(words, " ")[[1]]
split_now <- splitted
for (i in 1:length(splitted)) {
split_now[i] <- splitted[length(splitted) - i + 1]
}
return(paste(split_now, sep = " "))
}
reverse_words("sentence! this reverse")
?str_split
library(stringr)
?str_split
reverse_words <- function(words) {
splitted <- str_split(words, " ")[[1]]
split_now <- splitted
for (i in 1:length(splitted)) {
split_now[i] <- splitted[length(splitted) - i + 1]
}
return(paste(split_now, sep = " "))
}
reverse_words("sentence! this reverse")
reverse_words("sentence! this reverse")
cat(reverse_words("sentence! this reverse"))
library(stringr)
reverse_words <- function(words) {
splitted <- str_split(words, " ")[[1]]
split_now <- splitted
for (i in 1:length(splitted)) {
split_now[i] <- splitted[length(splitted) - i + 1]
}
print(split_now)
print(paste(split_now, sep = " "))
return(paste(split_now, sep = " "))
}
reverse_words("sentence! this reverse")
library(stringr)
reverse_words <- function(words) {
splitted <- str_split(words, " ")[[1]]
split_now <- splitted
for (i in 1:length(splitted)) {
split_now[i] <- splitted[length(splitted) - i + 1]
}
print(split_now)
print(paste(split_now, sep = " "))
return(paste(split_now, collapse = " "))
}
reverse_words("sentence! this reverse")
library(stringr)
reverse_words <- function(words) {
splitted <- str_split(words, " ")[[1]]
split_now <- splitted
for (i in 1:length(splitted)) {
split_now[i] <- splitted[length(splitted) - i + 1]
}
return(paste(split_now, collapse = " "))
}
reverse_words("sentence! this reverse")
reverse_words("string")
num_cons(fox)
for (i in 1:9) {
print(paste(paste('plot0', i, sep = ''), ".png", sep = ''))
}
for (i in 10:100) {
print(paste(paste('plot', i, sep = ''), ".png", sep = ''))
}
states <- rownames(USArrests)
head(states, n = 5)
grep(pattern = 'z', x = states)
starts_with <- function(word, letter) {
if (length(grep(pattern = paste("^", letter, sep = ''), x = word) > 0)) {
return(TRUE)
} else {
return(FALSE)
}
}
starts_with("Hello", 'H')  # TRUE
starts_with("Good morning", 'H')  # FALSE
ends_with <- function(word, letter) {
ends_with <- function(word, letter) {
ends_with <- function(word, letter) {
ends_with <- function(word, letter) {
if (length(grep(pattern = paste(letter, '$', sep = ''), x = word) > 0)) {
return(TRUE)
} else {
return(FALSE)
}
}
ends_with("Hello", 'o')  # TRUE
ends_with("Good morning", 'o')  # FALSE
ends_with <- function(word, letter) {
if (length(grep(pattern = paste(letter, '$', sep = ''), x = word) > 0)) {
return(TRUE)
} else {
return(FALSE)
}
}
ends_with("Hello", 'o')  # TRUE
ends_with("Good morning", 'o')  # FALSE
split_chars <- function(char_str) {
char_vect <- strsplit(char_str, NULL)
return(char_vect[[1]])
}
split_chars('Go Bears!')
split_chars('Expecto Patronum')
num_vowels <- function(char_vect) {
count <- rep(0, times = 5)
vowel_names <- c("a", "e", "i", "o", "u")
names(count) <- vowel_names
vowels <- c("a", "e", "i", "o", "u")
for (i in tolower(char_vect)) {
if (i %in% vowels) {
count[which(vowels == i)] <- count[which(vowels == i)] + 1
}
}
return(count)
}
vec <- c('G', 'o', ' ', 'B', 'e', 'a', 'r', 's', '!')
num_vowels(vec)
count_vowels <- function(char_str) {
count_split <- split_chars(char_str)
return(num_vowels(count_split))
}
count_vowels("The quick brown fox jumps over the lazy dog")
count_vowels("THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG")
num_cons <- function(input) {
count_split <- split_chars(input)
return(length(grep(pattern = "[^aeiou]",  x = count_split, ignore.case = TRUE))
- length(grep(pattern = "[[:blank:]]",  x = count_split, ignore.case = TRUE)))
}
fox <- "The quick brown fox jumps over the lazy dog"
num_cons(fox)
library(stringr)
reverse_words2 <- function(words) {
split_sent <- split_chars(words)
i <- length(split_sent)
curr_word <- c('')
new_sent <- c('')
while(i != 0) {
if (split_sent[i] == " ") {
str_replace_all(curr_word, fixed(" "), "")
new_sent <- paste(new_sent, curr_word, sep = " ")
curr_word <- c("")
i <- i - 1
} else {
curr_word <- paste(split_sent[i], curr_word, sep = '')
i <- i - 1
}
}
new_sent <- c(paste(new_sent, curr_word, sep = " "))
return(new_sent)
}
library(stringr)
reverse_words <- function(words) {
splitted <- str_split(words, " ")[[1]]
split_now <- splitted
for (i in 1:length(splitted)) {
split_now[i] <- splitted[length(splitted) - i + 1]
}
return(paste(split_now, collapse = " "))
}
reverse_words("sentence! this reverse")
reverse_words("string")
nav_node <- getNodeSet(
doc = doc,
path = '//ul[@class="nav navbar-nav secondary-nav"]')
library(XML)
# parsing html content
doc <- htmlParse('http://www.berkeley.edu/atoz')
install.packages(XML)
install.packages("XML")
library(XML)
# parsing html content
doc <- htmlParse('http://www.berkeley.edu/atoz')
nav_node <- getNodeSet(
doc = doc,
path = '//ul[@class="nav navbar-nav secondary-nav"]')
nav_node
navbar_nodes <- getNodeSet(
doc = doc,
path = '//ul[@class="nav navbar-nav secondary-nav"]/li')
navbar_nodes
xpathSApply(
doc = doc,
path = '//ul[@class="nav navbar-nav secondary-nav"]',
fun = xmlValue)
Alinks <- xpathSApply(
doc = doc,
path = '//div[@class="list-content"]/p/a',
fun = xmlAttrs)
ALinks
Alinks
install.packages(c("BH", "boot", "class", "cluster", "curl", "devtools", "digest", "evaluate", "foreign", "formatR", "ggplot2", "git2r", "gtable", "highr", "htmltools", "httr", "jsonlite", "knitr", "MASS", "Matrix", "memoise", "mgcv", "mime", "munsell", "nlme", "nnet", "plyr", "R6", "Rcpp", "readr", "rmarkdown", "rstudioapi", "rversions", "scales", "spatial", "stringi", "stringr", "survival", "XML", "xml2", "xtable"))
ls
dir
s
ls
cd
x -> []
x -> [1,2,3,4,5]
x -> {1,2,3,4,5}
x <- [1,2,3,4,5]
x <- c(1,2,3,4,5)
nstall.packages("rmarkdown")
install.packages("rmarkdown")
setwd(dir = "Documents/Fall 2016/Stats 159/projects/proj2/report/sections/")
library(reshape2)
library(ggplot2)
library(xtable)
library(Matrix)
load('../../data/MSE_ols.RData')
load('../../data/MSE_ridge.RData')
load('../../data/MSE_pcr.RData')
load('../../data/mse_lasso.RData')
load('../../data/mse_plsr.RData')
load('../../data/ols_model.RData')
load('../../data/ridge_model.RData')
load('../../data/lasso_model.RData')
load('../../data/pcr_model.RData')
load('../../data/plsr_model.RData')
options(xtable.caption.placement = 'top', xtable.comment = FALSE)
# Getting coeffecient table
Variables <- c("Intercept", "Income","Limit", "Rating", "Cards", "Age", "Education", "GenderFemale", "StudentYes", "MarriedYes", "EthnicityAsian", "EthnicityCaucasian")
OLS <- as.vector(ols_coef)
Ridge <- as.vector(best_model_ridge)
Lasso <- as.vector(bestmodel_lasso)
PCR <- as.vector(pcr_coef)
PCR <- append(PCR, 0, 0)
PLSR <- as.vector(plsr_coef)
PLSR <- append(PLSR, 0, 0)
Coef.frame <- data.frame(Variables, OLS, Ridge, Lasso, PCR, PLSR)
Coef_table <- xtable(Coef.frame, caption="Information about Model Coefficients", digits = 3)
##Getting Table of MSE
MSE <- c(MSE_ols, MSE_ridge, lasso_mse, MSE_pcr, plsr_mse)
Model <- c('OLS', 'Ridge', 'Lasso', 'PCR', 'PLSR')
mse.frame <- data.frame(Model, MSE)
MSE_table <- xtable(mse.frame, caption="Information about Mean Squared Errors", digits = 3)
## Graph Comparing all Coeffecients
coef_data <- data.frame(OLS, Ridge, Lasso, PCR, PLSR)
colnames(coef_data) <- c("OLS", "Ridge", "Lasso", "PCR", "PLSR")
row.names(coef_data) <- Variables
coef_data <- coef_data[-1,]
coef_data["Coeffecient"] <- rownames(coef_data)
df.coef <- melt(coef_data, id.vars = "Coeffecient", value.name = "Coef", variable.name = "Models")
df.coef$Coef = round(df.coef$Coef, digits = 3)
compare_coefficients <- ggplot(df.coef, aes( x = Coeffecient, y = Indicators) ) +
geom_bar( position = "identity", stat = "identity", alpha = .3, width = .3 ) +
facet_grid(Models ~.) +
theme(panel.margin = unit(0, "lines")) +
geom_text(aes(label=Indicators), position=position_dodge(width=0.9), vjust=0) +
scale_fill_brewer(palette="Blues") +
labs(title = "Comparing all Coeffecients for all the Models") +
theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
#Adding Histograms to Images
png('../../images/compare_coef.png')
compare_coefficients
dev.off()
compare_coefficients
df.coef$Coef = round(df.coef$Coef, digits = 3)
compare_coefficients <- ggplot(df.coef, aes( x = Coeffecient, y = Coef) ) +
geom_bar( position = "identity", stat = "identity", alpha = .3, width = .3 ) +
facet_grid(Models ~.) +
theme(panel.margin = unit(0, "lines")) +
geom_text(aes(label=Coef), position=position_dodge(width=0.9), vjust=0) +
scale_fill_brewer(palette="Blues") +
labs(title = "Comparing all Coeffecients for all the Models") +
theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
compare_coefficients
